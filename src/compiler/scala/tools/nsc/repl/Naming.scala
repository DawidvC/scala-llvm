/* NSC -- new Scala compiler
 * Copyright 2005-2010 LAMP/EPFL
 * @author  Paul Phillips
 */

package scala.tools.nsc
package repl

trait Naming {
  self: Interpreter =>
  
  import compiler._
  
  def getLineName() = lineNameCreator()
  def getVarName() = varNameCreator()
  def getSynthVarName() = synthVarNameCreator()
  def getBinderName() = binderNameCreator()
  val getRequestId: () => Int = {
    var x = 0
    () => { x += 1 ; x }
  }
  
  /** Generates names pre0, pre1, etc. via calls to apply method */
  class NameCreator(pre: String) {
    private var x = -1
    var mostRecent: String = null
    
    def apply(): String = { 
      x += 1
      val name = pre + x.toString
      // make sure we don't overwrite their unwisely named res3 etc.
      mostRecent =
        if (allNames contains name.toString) apply()
        else name
      
      mostRecent
    }
    def reset(): Unit = x = -1
    def didGenerate(name: String) =
      (name startsWith pre) && ((name drop pre.length) forall (_.isDigit))
  }

  /** allocate a fresh line name */
  /* private[nsc] */lazy val lineNameCreator = new NameCreator(nme.INTERPRETER_LINE_PREFIX)
  
  /** allocate a fresh var name */
  /* private[nsc] */lazy val varNameCreator = new NameCreator(nme.INTERPRETER_VAR_PREFIX)
  
  /** allocate a fresh internal variable name */
  /* private[nsc] */lazy val synthVarNameCreator = new NameCreator(nme.INTERPRETER_SYNTHVAR_PREFIX)
  
  /** A name creator used for objects created by bind. */
  /* private[nsc] */lazy val binderNameCreator = new NameCreator("binder")
  
  /* private[nsc] */lazy val allCreators = List(
    lineNameCreator, varNameCreator, synthVarNameCreator, binderNameCreator
  )

  /** Check if a name looks like it was generated by varNameCreator */
  /* private[nsc] */def isGeneratedVarName(name: String): Boolean = varNameCreator didGenerate name  
  /* private[nsc] */def isSynthVarName(name: String): Boolean = synthVarNameCreator didGenerate name
  /* private[nsc] */def isSynthVarName(name: Name): Boolean = synthVarNameCreator didGenerate name.toString
}